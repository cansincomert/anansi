{
  "swagger": "2.0",
  "info": {
    "title": "embedds",
    "version": "1.0.0",
    "contact": {
      "name": "anansi",
      "url": "https://github.com/infrawhispers/anansi",
      "email": "infrawhispers@proton.me"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/infrawhispers/anansi/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Api"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/encode": {
      "post": {
        "summary": "Encode::Encode",
        "description": "Generates a vector representation of text or images using the specified embedding model. If the model does not exist or has not been loaded, an error will be returned for that particular data item. \u003cbr/\u003e\u003cbr/\u003eIt is recommended that multiple pieces of content are specified in a single request to take advantage of batching, especially when running with an attached \u003ca href='https://onnxruntime.ai/docs/execution-providers/' target='_blank'\u003eGPU.\u003c/a\u003e Recommended sizes can be found at \u003ca href='/embedds/supported-models' target='_blank'\u003eembedds/model-details\u003c/a\u003e and batching will be automatically done.\u003cbr/\u003e----\u003cbr/\u003e\u003cb\u003eNot all models support [text, images, image_uris]\u003c/b\u003e a breakdown of present support is outlined below:\u003cul\u003e\u003cli\u003eModelClass_INSTRUCTOR - requires: {text and data.instruction}\u003c/li\u003e\u003cli\u003eModelClass_CLIP - any_of: {text, images}\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "encode_",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEncodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEncodeRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/encode/initialize": {
      "post": {
        "summary": "Encode::Initialize",
        "description": "Intializes an ONNX based embedding model, adding it to the pool of models available for vector generation. ONNX models are loaded from the folder designated by ```EMBBEDDS_CACHE_FOLDER``` and it is recommended that this folder be volume mounted if running within a container.\u003cbr/\u003e\u003cbr/\u003eIf the model is missing, the server will attempt to download the corresponding file from a remote source.\u003cbr/\u003e\u003cbr/\u003eembedds must be created with ```EMBEDDS_ALLOW_ADMIN=true``` as the unrestricted creation of models can lead to resource starvation. If you are exposing the process to non-trusted clients, we recommended that ```EMBEDDS_ALLOW_ADMIN``` be set to false.",
        "operationId": "encode_initialize",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiInitializeModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiInitializeModelRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/index": {
      "get": {
        "summary": "Index::Get",
        "description": "fetches all initialized and running indices ",
        "operationId": "index_get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetIndicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Index::Create",
        "description": "TODO(infrawhispers) - PENDING",
        "operationId": "index_create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateIndexResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateIndexRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/index/deactivate": {
      "post": {
        "summary": "Index::Deactivate",
        "description": "TODO(infrawhispers) - PENDING",
        "operationId": "index_deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeactivateIndexResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeactivateIndexRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/index/delete": {
      "post": {
        "summary": "Index::Delete",
        "operationId": "index_delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteIndexResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteIndexRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/index/delete_data": {
      "post": {
        "summary": "Index::DeleteData",
        "description": "Deletes data from the given index based on the supplied ids ",
        "operationId": "index_delete_data",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteDataRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/index/search": {
      "post": {
        "summary": "Index::Search",
        "description": "TODO(infrawhispers) - PENDING",
        "operationId": "index_search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchIndexResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSearchIndexRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "apiContent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "bytes": {
          "type": "string",
          "format": "byte"
        },
        "instruction": {
          "type": "string"
        }
      }
    },
    "apiCreateIndexRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index_type": {
          "$ref": "#/definitions/apiIndexType"
        },
        "metric_type": {
          "$ref": "#/definitions/apiMetricType"
        },
        "flat_params": {
          "$ref": "#/definitions/apiFlatParams"
        },
        "embedding_model_name": {
          "type": "string",
          "title": "items that are used for the auto-generation of embeddings"
        },
        "embedding_model_class": {
          "$ref": "#/definitions/apiModelClass"
        }
      }
    },
    "apiCreateIndexResponse": {
      "type": "object"
    },
    "apiDeactivateIndexRequest": {
      "type": "object"
    },
    "apiDeactivateIndexResponse": {
      "type": "object"
    },
    "apiDeleteDataRequest": {
      "type": "object",
      "properties": {
        "index_name": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiDeleteDataResponse": {
      "type": "object"
    },
    "apiDeleteIndexRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "apiDeleteIndexResponse": {
      "type": "object"
    },
    "apiEmbedding": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "vals": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "apiEncodeBatch": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "text": {
          "$ref": "#/definitions/apiTextContent"
        },
        "images": {
          "$ref": "#/definitions/apiImageContent"
        },
        "image_uris": {
          "$ref": "#/definitions/apiImageURIContent"
        }
      },
      "description": "Minimal encoding unit associating a piece of content [text, image, image_uri] with a selected model",
      "required": [
        "model"
      ]
    },
    "apiEncodeRequest": {
      "type": "object",
      "example": {
        "data": [
          {
            "model_class": "ModelClass_INSTRUCTOR",
            "model_name": "INSTRUCTOR_LARGE",
            "text": [
              "3D ActionSLAM: wearable person tracking ...",
              "Inside Gohar World and the Fine, Fantastical Art"
            ],
            "instructions": [
              "Represent the Science title:",
              "Represent the Magazine title:"
            ]
          }
        ]
      },
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiEncodeBatch"
          },
          "description": "repeated data items to generate encodings for",
          "title": "batching occurs at the EncodeBundle level - to ensure proper optimization, one will need\nto ensure that for a given model, you provide _all_ the data that must be encoded by\nsaid model"
        }
      }
    },
    "apiEncodeResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiEncodeResult"
          },
          "description": "list of embedding results corresponding to the ordered content submitted"
        }
      }
    },
    "apiEncodeResult": {
      "type": "object",
      "properties": {
        "err_message": {
          "type": "string",
          "description": "explanation for why the content could not be encoded"
        },
        "embedding": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "embedding representation of the the content"
        }
      }
    },
    "apiFlatParams": {
      "type": "object",
      "properties": {
        "dimensions": {
          "type": "integer",
          "format": "int64"
        },
        "segment_size_kb": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiGetIndicesResponse": {
      "type": "object"
    },
    "apiImageContent": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiContent"
          }
        }
      }
    },
    "apiImageURIContent": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiContent"
          }
        }
      }
    },
    "apiIndexDataRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "index_name": {
          "type": "string"
        },
        "no_embedds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiIndexDataResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiIndexResult"
          }
        }
      }
    },
    "apiIndexResult": {
      "type": "object",
      "properties": {
        "err_message": {
          "type": "string"
        },
        "is_success": {
          "type": "boolean"
        },
        "data_id": {
          "type": "string"
        }
      }
    },
    "apiIndexType": {
      "type": "string",
      "enum": [
        "IndexType_UNKNOWN",
        "IndexType_FLAT",
        "IndexType_DiskANNMem"
      ],
      "default": "IndexType_UNKNOWN"
    },
    "apiInitializeModelRequest": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "example": [
            {
              "model_name": "M_INSTRUCTOR_BASE",
              "num_threads": 4,
              "parallel_execution": true
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiModelSettings"
          },
          "description": "A list of models to be initialized"
        }
      }
    },
    "apiInitializeModelResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiModelInitResult"
          }
        }
      }
    },
    "apiMetricType": {
      "type": "string",
      "enum": [
        "MetricType_UNKNOWN",
        "MetricType_COSINE",
        "MetricType_L1",
        "MetricType_L2",
        "MetricType_HAMMING"
      ],
      "default": "MetricType_UNKNOWN"
    },
    "apiModelClass": {
      "type": "string",
      "enum": [
        "ModelClass_Unknown",
        "ModelClass_CLIP",
        "ModelClass_INSTRUCTOR",
        "ModelClass_E5"
      ],
      "default": "ModelClass_Unknown"
    },
    "apiModelInitResult": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "initialized": {
          "type": "boolean",
          "description": "whether or not the model was successfully initalized"
        },
        "err_message": {
          "type": "string",
          "description": "error details outlining why the model could not be initialized"
        }
      },
      "description": "Configuration settings for the instantiaion of an onnx model",
      "readOnly": true
    },
    "apiModelSettings": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "num_threads": {
          "type": "integer",
          "format": "int64",
          "description": "The number of threads to parallelize the execution of the graph - if the graph can be parallelized. \u003cbr/\u003e If unset, defaults to the available parallelism on the underlying machine."
        },
        "parallel_execution": {
          "type": "boolean",
          "description": "Enable/disable the parallel execution of the graph. Parallel execution can improve model execution speed at the cost of increased memory usage."
        }
      },
      "description": "Configuration settings for the instantiaion of an onnx model",
      "required": [
        "model_name"
      ]
    },
    "apiNearestNeighbor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "distance": {
          "type": "number",
          "format": "float"
        },
        "document": {
          "type": "string"
        }
      }
    },
    "apiSearchIndexRequest": {
      "type": "object",
      "properties": {
        "index_name": {
          "type": "string"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiSearchQuery"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "oneof search_request {\n  // we cannot have a repeated field of JSON\n  Embeddings embeddings = 2;\n  string json = 3;\n}"
        },
        "weighting": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "per_search_limit": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiSearchIndexResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiSearchResponse"
          }
        }
      }
    },
    "apiSearchQuery": {
      "type": "object",
      "properties": {
        "text": {
          "$ref": "#/definitions/apiContent",
          "title": "Content content = 1;"
        },
        "image_uri": {
          "$ref": "#/definitions/apiContent"
        },
        "image_bytes": {
          "$ref": "#/definitions/apiContent"
        },
        "embedding": {
          "$ref": "#/definitions/apiEmbedding"
        }
      }
    },
    "apiSearchResponse": {
      "type": "object",
      "properties": {
        "search_id": {
          "type": "string"
        },
        "nns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiNearestNeighbor"
          }
        },
        "err_message": {
          "type": "string"
        }
      }
    },
    "apiTextContent": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiContent"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
